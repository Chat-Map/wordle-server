// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kodekulture/wordle-server/handler (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/service.go -package=mocks -typed . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	game "github.com/kodekulture/wordle-server/game"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockService) ComparePasswords(hash, original string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hash, original)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockServiceMockRecorder) ComparePasswords(hash, original any) *MockServiceComparePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockService)(nil).ComparePasswords), hash, original)
	return &MockServiceComparePasswordsCall{Call: call}
}

// MockServiceComparePasswordsCall wrap *gomock.Call
type MockServiceComparePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceComparePasswordsCall) Return(arg0 error) *MockServiceComparePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceComparePasswordsCall) Do(f func(string, string) error) *MockServiceComparePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceComparePasswordsCall) DoAndReturn(f func(string, string) error) *MockServiceComparePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInvite mocks base method.
func (m *MockService) CreateInvite(player game.Player, gameID uuid.UUID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvite", player, gameID)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateInvite indicates an expected call of CreateInvite.
func (mr *MockServiceMockRecorder) CreateInvite(player, gameID any) *MockServiceCreateInviteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvite", reflect.TypeOf((*MockService)(nil).CreateInvite), player, gameID)
	return &MockServiceCreateInviteCall{Call: call}
}

// MockServiceCreateInviteCall wrap *gomock.Call
type MockServiceCreateInviteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateInviteCall) Return(arg0 string) *MockServiceCreateInviteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateInviteCall) Do(f func(game.Player, uuid.UUID) string) *MockServiceCreateInviteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateInviteCall) DoAndReturn(f func(game.Player, uuid.UUID) string) *MockServiceCreateInviteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePlayer mocks base method.
func (m *MockService) CreatePlayer(ctx context.Context, player *game.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockServiceMockRecorder) CreatePlayer(ctx, player any) *MockServiceCreatePlayerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockService)(nil).CreatePlayer), ctx, player)
	return &MockServiceCreatePlayerCall{Call: call}
}

// MockServiceCreatePlayerCall wrap *gomock.Call
type MockServiceCreatePlayerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePlayerCall) Return(arg0 error) *MockServiceCreatePlayerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePlayerCall) Do(f func(context.Context, *game.Player) error) *MockServiceCreatePlayerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePlayerCall) DoAndReturn(f func(context.Context, *game.Player) error) *MockServiceCreatePlayerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGame mocks base method.
func (m *MockService) GetGame(ctx context.Context, userID int, roomID uuid.UUID) (*game.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", ctx, userID, roomID)
	ret0, _ := ret[0].(*game.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockServiceMockRecorder) GetGame(ctx, userID, roomID any) *MockServiceGetGameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockService)(nil).GetGame), ctx, userID, roomID)
	return &MockServiceGetGameCall{Call: call}
}

// MockServiceGetGameCall wrap *gomock.Call
type MockServiceGetGameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetGameCall) Return(arg0 *game.Game, arg1 error) *MockServiceGetGameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetGameCall) Do(f func(context.Context, int, uuid.UUID) (*game.Game, error)) *MockServiceGetGameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetGameCall) DoAndReturn(f func(context.Context, int, uuid.UUID) (*game.Game, error)) *MockServiceGetGameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInviteData mocks base method.
func (m *MockService) GetInviteData(token string) (game.Player, uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteData", token)
	ret0, _ := ret[0].(game.Player)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetInviteData indicates an expected call of GetInviteData.
func (mr *MockServiceMockRecorder) GetInviteData(token any) *MockServiceGetInviteDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteData", reflect.TypeOf((*MockService)(nil).GetInviteData), token)
	return &MockServiceGetInviteDataCall{Call: call}
}

// MockServiceGetInviteDataCall wrap *gomock.Call
type MockServiceGetInviteDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetInviteDataCall) Return(arg0 game.Player, arg1 uuid.UUID, arg2 bool) *MockServiceGetInviteDataCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetInviteDataCall) Do(f func(string) (game.Player, uuid.UUID, bool)) *MockServiceGetInviteDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetInviteDataCall) DoAndReturn(f func(string) (game.Player, uuid.UUID, bool)) *MockServiceGetInviteDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPlayer mocks base method.
func (m *MockService) GetPlayer(ctx context.Context, username string) (*game.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, username)
	ret0, _ := ret[0].(*game.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockServiceMockRecorder) GetPlayer(ctx, username any) *MockServiceGetPlayerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockService)(nil).GetPlayer), ctx, username)
	return &MockServiceGetPlayerCall{Call: call}
}

// MockServiceGetPlayerCall wrap *gomock.Call
type MockServiceGetPlayerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetPlayerCall) Return(arg0 *game.Player, arg1 error) *MockServiceGetPlayerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetPlayerCall) Do(f func(context.Context, string) (*game.Player, error)) *MockServiceGetPlayerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetPlayerCall) DoAndReturn(f func(context.Context, string) (*game.Player, error)) *MockServiceGetPlayerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPlayerRooms mocks base method.
func (m *MockService) GetPlayerRooms(ctx context.Context, playerID int) ([]game.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerRooms", ctx, playerID)
	ret0, _ := ret[0].([]game.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerRooms indicates an expected call of GetPlayerRooms.
func (mr *MockServiceMockRecorder) GetPlayerRooms(ctx, playerID any) *MockServiceGetPlayerRoomsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerRooms", reflect.TypeOf((*MockService)(nil).GetPlayerRooms), ctx, playerID)
	return &MockServiceGetPlayerRoomsCall{Call: call}
}

// MockServiceGetPlayerRoomsCall wrap *gomock.Call
type MockServiceGetPlayerRoomsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetPlayerRoomsCall) Return(arg0 []game.Game, arg1 error) *MockServiceGetPlayerRoomsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetPlayerRoomsCall) Do(f func(context.Context, int) ([]game.Game, error)) *MockServiceGetPlayerRoomsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetPlayerRoomsCall) DoAndReturn(f func(context.Context, int) ([]game.Game, error)) *MockServiceGetPlayerRoomsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRoom mocks base method.
func (m *MockService) GetRoom(id uuid.UUID) (*game.Room, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", id)
	ret0, _ := ret[0].(*game.Room)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockServiceMockRecorder) GetRoom(id any) *MockServiceGetRoomCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockService)(nil).GetRoom), id)
	return &MockServiceGetRoomCall{Call: call}
}

// MockServiceGetRoomCall wrap *gomock.Call
type MockServiceGetRoomCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetRoomCall) Return(arg0 *game.Room, arg1 bool) *MockServiceGetRoomCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetRoomCall) Do(f func(uuid.UUID) (*game.Room, bool)) *MockServiceGetRoomCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetRoomCall) DoAndReturn(f func(uuid.UUID) (*game.Room, bool)) *MockServiceGetRoomCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewRoom mocks base method.
func (m *MockService) NewRoom(ownerUsername string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRoom", ownerUsername)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewRoom indicates an expected call of NewRoom.
func (mr *MockServiceMockRecorder) NewRoom(ownerUsername any) *MockServiceNewRoomCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRoom", reflect.TypeOf((*MockService)(nil).NewRoom), ownerUsername)
	return &MockServiceNewRoomCall{Call: call}
}

// MockServiceNewRoomCall wrap *gomock.Call
type MockServiceNewRoomCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceNewRoomCall) Return(arg0 string) *MockServiceNewRoomCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceNewRoomCall) Do(f func(string) string) *MockServiceNewRoomCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceNewRoomCall) DoAndReturn(f func(string) string) *MockServiceNewRoomCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockService) Stop(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop(arg0 any) *MockServiceStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop), arg0)
	return &MockServiceStopCall{Call: call}
}

// MockServiceStopCall wrap *gomock.Call
type MockServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStopCall) Return() *MockServiceStopCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStopCall) Do(f func(context.Context)) *MockServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStopCall) DoAndReturn(f func(context.Context)) *MockServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePlayerSession mocks base method.
func (m *MockService) UpdatePlayerSession(ctx context.Context, username string, sessionTs int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerSession", ctx, username, sessionTs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerSession indicates an expected call of UpdatePlayerSession.
func (mr *MockServiceMockRecorder) UpdatePlayerSession(ctx, username, sessionTs any) *MockServiceUpdatePlayerSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerSession", reflect.TypeOf((*MockService)(nil).UpdatePlayerSession), ctx, username, sessionTs)
	return &MockServiceUpdatePlayerSessionCall{Call: call}
}

// MockServiceUpdatePlayerSessionCall wrap *gomock.Call
type MockServiceUpdatePlayerSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdatePlayerSessionCall) Return(arg0 error) *MockServiceUpdatePlayerSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdatePlayerSessionCall) Do(f func(context.Context, string, int64) error) *MockServiceUpdatePlayerSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdatePlayerSessionCall) DoAndReturn(f func(context.Context, string, int64) error) *MockServiceUpdatePlayerSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
